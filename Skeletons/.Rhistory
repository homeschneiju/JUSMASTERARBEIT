###############
packs <- c("tseries", "forecast", "reshape2", , "caret", "urca")
############
### PRELIMINARIES - LOAD
###############
packs <- c("tseries", "forecast", "reshape2", "caret", "urca")
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])];
if(length(k))
{install.packages(k, repos='https://cran.rstudio.com/');}
for(package_name in packages)
{library(package_name,character.only=TRUE, quietly = TRUE);}
}
Install_And_Load(packs)
# load data
data(Seatbelts)
#ts_freight <- ts(data[complete.cases(data),])
flosa <- Seatbelts[,"DriversKilled"]
jausa <- Seatbelts
tsCV(flosa)
createTimeSlices(flosa,1)
tsCV(flosa,fit)
tsCV(flosa,fit, window=1)
splitflosa <- createTimeSlices(flosa,1)
splitflosa
splitflosa[1]
createTimeSlices(1:9, 5, 1, fixedWindow = FALSE)
splitflosa
createTimeSlices(1:9, 5, 1, fixedWindow = TRUE)
tsCV(flosa,jausa, window=1)
rfe(jausa, flosa)
colnames(jausa)
colnames(flosa)
colnames(flosa) <- "fatalities"
rfe(splitflosa)
step(fit)
fit <- arima(flosa,c(1,0,3), list(order = c(1,0,1)))
step(fit)
step(flosa~jausa)
lm <- flosa~jausa
step(lm)
lm <- lm(flosa~jausa)
step(lm)
jausa[,!1]
jausa[,~1]
jausa[,-1]
head(jausa[,-1])
lm <- lm(flosa~jausa[,-1])
step(lm)
lm <- lm(DriversKilled~ .,data = jausa)
step(lm)
flosalag = lag(flosa)
head(flosalag)
head(flosa)
rfe(lm)
rfe(jausa["DriversKilled"], jausa[,-1])
rfe(jausa[,1], jausa[,-1])
flosalag = lag(flosa)?
Box.test(fit$resid,type="Ljung-Box")
flosalag = lag(flosa)?
Box.test(flosa,type="Ljung-Box")
Box.test(flosa,type="Ljung-Box")
Box.test(fit$residuals,type="Ljung-Box")
checkresiduals(fit)
jarque.bera.test(fit)
jarque.bera.test(flosa)
jarque.bera.test(difflosa)
# apply differencing - not needed tho
difflosa = diff(flosa, differences = 12)
jarque.bera.test(difflosa)
jarque.bera.test(flosa)
jarque.bera.test(fit$residuals)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
sizes <- c(1:5)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
rfe(jausa[,1], jausa[,-1], sizes = sizes, rfeControl = ctrl)
length(jausa[,1])
length(jausa[,-1])
length(jausa[,c(-1)])
1344/192
nrow(jausa[,c(-1)])
rfe(jausa[,-1], jausa[,1], sizes = sizes, rfeControl = ctrl)
ctrl <- rfeControl(functions = lmFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
rfe(jausa[,-1], jausa[,1], sizes = sizes, rfeControl = ctrl)
lm
step(lm)
summary(lm)
ctrl <- rfeControl(functions = arima(),
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
ctrl <- rfeControl(functions = fit,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
arimarfe <- rfe(jausa[,-1], jausa[,1], sizes = sizes, rfeControl = ctrl)
library(randomForest)
install.packages("randomForest")
library(randomForest)
ctrl <- rfeControl(functions = rfFuncs,
method = "repeatedcv",
repeats = 5,
verbose = FALSE)
arimarfe <- rfe(jausa[,-1], jausa[,1], sizes = sizes, rfeControl = ctrl)
############
### PRELIMINARIES - LOAD
###############
packs <- c("tseries", "forecast", "reshape2", "caret", "urca")
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])];
if(length(k))
{install.packages(k, repos='https://cran.rstudio.com/');}
for(package_name in packages)
{library(package_name,character.only=TRUE, quietly = TRUE);}
}
Install_And_Load(packs)
# load data
data(Seatbelts)
#ts_freight <- ts(data[complete.cases(data),])
flosa <- Seatbelts[,"DriversKilled"]
jausa <- Seatbelts
# TREND /stationarity
lmtrend = lm(flosa ~ time(flosa))
#looks like ARMA(5,2)
autofit <- auto.arima(flosa)
fit <- arima(flosa,c(1,0,3), list(order = c(1,0,1)))
#splitflosa <- createTimeSlices(flosa,1) # from caret
splitflosa <- tsCV(flosa, forecastfunction = fit)
splitflosa[1]
splitflosa
#splitflosa <- createTimeSlices(flosa,1) # from caret
splitflosa <- tsCV(flosa, forecastfunction = forecast(fit))
splitflosa
#splitflosa <- createTimeSlices(flosa,1) # from caret
splitflosa <- tsCV(flosa, forecastfunction = forecast(Arima(flosa,c(1,0,3), list(order = c(1,0,1)))))
splitflosa
#splitflosa <- createTimeSlices(flosa,1) # from caret
far2 <- function(x,h) (forecast(Arima(x,c(1,0,3), list(order = c(1,0,1))), h = h))
splitflosa <- tsCV(flosa, forecastfunction = far2, h = 1)
splitflosa
splitflosa <- tsCV(flosa, forecastfunction = far2, h = 1, window = 5)
splitflosa
splitflosa <- tsCV(flosa, forecastfunction = far2, h = 1, window = 2)
splitflosa
splitflosa <- tsCV(flosa, forecastfunction = far2, h = 1, window = 1)
splitflosa
splitflosa <- tsCV(flosa, forecastfunction = far2, h = 1)
splitflosa
rmse(splitflosa)
sqrt(mean(residuals(far2(flosa))^2, na.rm=TRUE))
sqrt(mean(residuals(far2(flosa, h=1))^2, na.rm=TRUE))
sqrt(mean(splitflosa^2, na.rm=TRUE))
library(Metrics)
install.packages("Metrics")
library(Metrics)
rmse(splitflosa)
# compare RMSE of tsCV with regular residuals on complete data set
sqrt(mean(splitflosa^2, na.rm=TRUE))
sqrt(mean(residuals(far2(flosa, h=1))^2, na.rm=TRUE))
# compare RMSE of tsCV with regular residuals on complete data set
rmse <- function(error)
{
sqrt(mean(error^2))
}
rmse(splitflosa^2, na.rm=TRUE)
# compare RMSE of tsCV with regular residuals on complete data set
rmse <- function(error, na.rm=TRUE)
{
sqrt(mean(error^2))
}
rmse(splitflosa^2, na.rm=TRUE)
# compare RMSE of tsCV with regular residuals on complete data set
rmse <- function(error)
{
sqrt(mean(error^2))
}
rmse(splitflosa)
# compare RMSE of tsCV with regular residuals on complete data set
rmse <- function(error)
{
sqrt(mean(error^2, na.rm = TRUE))
}
rmse(splitflosa)
rmse(residuals(far2(flosa, h=1))^2, na.rm=TRUE)
rmse(residuals(far2(flosa, h=1))^2)
rmse(residuals(far2(flosa, h=1)))
packs <- c("tseries", "forecast", "reshape2", "urca", "e1071")
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])];
if(length(k))
{install.packages(k, repos='https://cran.rstudio.com/');}
for(package_name in packages)
{library(package_name,character.only=TRUE, quietly = TRUE);}
}
Install_And_Load(packs)
svm(flosa~lag(flosa))
flosalag
head(flosalag)
head(flosa)
head((lag(flosa,12))
head(lag(flosa,12))
flosamiss <-flosa
flosamiss[c(3,67,39)] <- NA
any(is.na(flosamiss))
na.interp(flosamiss)
flosamiss <- na.interp(flosamiss)
flosamiss[3]
flosa[3]
flosamiss[c(3,67,39)]
flosa[c(3,67,39)]
install.packages("zoo")
install.packages("zoo")
library(zoo)
library(zoo)
install.packages("zoo")
install.packages("zoo")
library(zoo)
flosamiss <- na.approx(flosamiss)
flosamiss[c(3,67,39)]
flosa[c(3,67,39)]
flosamiss <- na.interp(flosamiss, lambda="auto")
flosamiss[c(3,67,39)]
flosa[c(3,67,39)]
difflosamiss <- difflosa
difflosamiss[c(3,67,39)] <- NA
difflosamiss <- na.interp(difflosamiss)
library(forecast)
difflosamiss <- na.interp(difflosamiss)
difflosamiss[c(3,67,39)]
difflosa[c(3,67,39)]
difflosamiss <- difflosa
difflosamiss[c(3,67,39)] <- NA
difflosamiss <- na.interp(difflosamiss)
difflosamiss[c(3,67,39)]
difflosa[c(3,67,39)]
plot(flosa)
plot(flosamiss)
cpgram(flosa)
library(TSA)
install.packages("TSA")
library(TSA)
install.packages("TSA")
library(TSA)
periodogram(flosa)
periodogram(jausa[,1])
acf(lag(flosa))
plot(flosa)
periodogram(difflosa)
periodogram(jausa[,1])
pdgram <- periodogram(jausa[,1])
pdgram$freq
pdgram$spec
pdgram
difflosa = diff(flosa, 12)
plot(difflosa)
plot(diff(difflosa,1))
plot(diff(difflosa,1)[1:10])
acf(diff(difflosa,1)[1:10])
packs <- c("tseries", "forecast", "reshape2", "zoo", "lubridate", "tidyverse","urca", "e1071")
packs <- c("tseries", "forecast", "reshape2", "zoo", "lubridate", "tidyverse","urca", "e1071")
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])];
if(length(k))
{install.packages(k, repos='https://cran.rstudio.com/');}
for(package_name in packages)
{library(package_name,character.only=TRUE, quietly = TRUE);}
}
Install_And_Load(packs)
packs <- c("tseries", "forecast", "reshape2", "zoo", "lubridate", "tidyverse", "e1071", "openxlsx")
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])];
if(length(k))
{install.packages(k, repos='https://cran.rstudio.com/');}
for(package_name in packages)
{library(package_name,character.only=TRUE, quietly = TRUE);}
}
Install_And_Load(packs)
getwd()
setwd("C:/Users/Juliana Schneider/Documents/JUSMASTERARBEIT/Skeletons/")
cal <- readRDS("calfinal.rds")
colnames(cal)
cal2 <- cal[,c(10:12,1:4,6:9,13:28,30:36)]
colnames(cal2)
head(cal2$Bruttoinlandsprodukt)
cal$VPIby <- as.numeric(gsub(",",".",cal$VPIby))
cal$VPInahr <- as.numeric(gsub(",",".",cal$VPInahr))
cal$Bruttoinlandsprodukt <- as.numeric(gsub(",",".",cal$Bruttoinlandsprodukt))
saveRDS(cal, "E:/KIVAS/Daten/calfinal.rds")
saveRDS(cal, "calfinal.rds")
head(cal)
cal2 <- cal[,c(10:12,1:4,6:9,13:28,30:36)]
colnames(cal2)
head(cal2$Bruttoinlandsprodukt)
calx <- colnames(cal)[5:34]
calx
calx <- colnames(cal2)[5:34]
calx
combn(calx)
combn(calx, 1:length(calx))
combn(calx, 2:length(calx))
for (i in 2:length(calx)){
cbn[i] <- combn(calx, i)
}
cbn <- []
cbn <- list()
for (i in 2:length(calx)){
cbn[i] <- combn(calx, i)
}
cbn
for (i in 2:4){
cbn[i] <- combn(calx, i)
}
for (i in 2:4){
cbn <- combn(calx, i)
}
cbn
calx
install.packages("sets")
library(sets)
set_power(calx)
set_power(calx[1:5])
loo <- list()
for (i in 1:length(calx)){
loo[i] <- calx[-i]
}
loo
loo <- list()
for (i in 1:length(calx)){
print(i)
loo[i] <- calx[-i]
}
loo
calx[-1]
calx
loo <- list()
for (i in 1:length(calx)){
print(i)
loo[[i]] <- calx[-i]
}
loo
set_power(calx[1:5])
loo2 <- list()
for (i in 1:length(loo)){
loo2[[i]] <- loo[-i]
}
loo[1]
loo2[1]
loo[[1]]
loo2[[1]]
loo[[1]]
loo2[[1]][1]
packs <- c("tseries", "forecast", "reshape2", "zoo", "lubridate", "tidyverse", "e1071", "openxlsx", "caret")
Install_And_Load <- function(packages) {
k <- packages[!(packages %in% installed.packages()[,"Package"])];
if(length(k))
{install.packages(k, repos='https://cran.rstudio.com/');}
for(package_name in packages)
{library(package_name,character.only=TRUE, quietly = TRUE);}
}
Install_And_Load(packs)
cal <- readRDS("E:/calfinal.rds")
length(colnames(cal))
sapply(cal,function(x) any(is.na(x)))
# reorder columns of cal to set target variables first
cal2 <- cal[,c(10:12,1:4,6:9,14:28,30:33)]
sapply(cal2,function(x) any(is.na(x)))
colnames(cal2)
# choose numeric X-variables
calx <- colnames(cal2)[c(6:30)]
num <- as.vector(which(sapply(cal2[,c(calx)],class)=="numeric"))
# calculate correlation matrix
correlationMatrix <- cor(as.matrix(cal2[,calx[num]]), method = "pearson")
# summarize the correlation matrix
#print(correlationMatrix)
# find attributes that are highly corrected (ideally >0.75)
highlyCorrelated <- findCorrelation(correlationMatrix, cutoff=0.5)
# print indexes of highly correlated attributes
print(highlyCorrelated)
sort(highlyCorrelated)
calfilter <- calx[-highlyCorrelated]
calgone <- calx[highlyCorrelated]
calgone
highlyCorrelated
calx
calfilter
calfilter <- cal2[,-highlyCorrelated]
calfilter
colnames(calfilter)
colnames(cal2[,calx[num]])
calx[num]
calx[num][,-highlyCorrelated]
calfilter <- calx[num][-highlyCorrelated]
highlyCorrelated
calfilter
sort(highlyCorrelated)
calgone <- calx[num][highlyCorrelated]
calgone
# prepare training scheme
controlimp <- trainControl(method="timeslice", initialWindow = 7, horizon=1, fixedWindow=T)
# train the model
cal3 <- cal2[,c(calx,"Weight")]
model <- train(Weight~., data=cal3, method="cforest", trControl=controlimp)
fac <- as.vector(which(sapply(cal2[,c(calx)],class)=="factor"))
fac
colnames(cal2)[fac]
calfilter
calx[num]
calfac <- colnames(cal2)[fac]
sapply(cal2[,calx],class) != "numeric"
sapply(cal2[,calx],class) == "factor"
fac <- as.vector(which(sapply(cal2[,c(calx)],class)=="factor"))
colnames(cal2)[fac]
colnames(cal2[,calx])[fac]
calfac <- colnames(cal2[,calx])[fac]
cor(as.matrix(cal2[,calx[fac]],method="spearman"))
chisq.test(as.matrix(cal2[,calx[fac]],method="spearman"))
chisq.test(as.matrix(cal2[,calx[fac]]))
chisq.test(cal2[,calx[fac]])
head(cal2[,calx[fac]])
chisq.test(table(cal2[,calx[fac]]))
sapply(cal2[,calx],class) == "factor"
table(cal2[,calx[fac]])
chisq.test(table(cal2[,calx[fac]]))
pairwise.chisq.test(table(cal2[,calx[fac]]))
fac
calfac
chisq.test(table(cal2[,"Month"], cal2[,"Quarter"]))
chisq.test(table(cal2[,"Weekday_No"], cal2[,"Weekend"]))
chisq.test(table(cal2[,"Holiday"], cal2[,"HolidayWeek"]))
chisq.test(table(cal2[,"Holiday"], cal2[,"HolidayWeek"]), simulate.p.value = T)
calfac
set_power(calfac, 2)
library(sets)
set_power(calfac, 2)
cmbn(calfac,2)
combn(calfac,2)
combn(calfac)
twofac <- combn(calfac,2)
twofac[1]
twofac[1,]
twofac[,1]
length(twofac)
ncol(twofac)
chis = list()
twofac <- combn(calfac,2)
for (i in 1:ncol(twofac)){
chis[i] <- chisq.test(table(cal[twofac[1,i]], cal[twofac[2,i]]))
}
for (i in 1:ncol(twofac)){
chis[i] <- chisq.test(table(cal2[twofac[1,i]], cal2[twofac[2,i]]))
}
chisq.test(table(cal2[twofac[1,1]], cal2[twofac[2,1]]))
twofac[1,1]
twofac[2,1]
table(cal2[twofac[1,1]], cal2[twofac[2,1]])
for (i in 1:ncol(twofac)){
chis[i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]))
}
warnings()
chis = list()
twofac <- combn(calfac,2)
for (i in 1:ncol(twofac)){
chis[i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]), simulate.p.value = T)
}
warnings()
table(cal2[,twofac[1,1]], cal2[,twofac[2,1]])
chis
chis[1]
chis[[1]]
chis[[1]]$p.value
summary(chis[1])
chis = list()
for (i in 1:ncol(twofac)){
chis[i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]), simulate.p.value = T)$p.value
}
chis
chis = data.frame()
twofac <- combn(calfac,2)
for (i in 1:ncol(twofac)){
chis[1,i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]), simulate.p.value = T)
chis[2,i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]), simulate.p.value = T)$p.value
}
chis = data.frame(matrix(nrow=2,ncol=15))
twofac <- combn(calfac,2)
for (i in 1:ncol(twofac)){
chis[1,i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]), simulate.p.value = T)
chis[2,i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]), simulate.p.value = T)$p.value
}
chis
chis = data.frame(matrix(nrow=2,ncol=15))
chis
chis[1,1]
chis[2,1]
chis = list()
twofac <- combn(calfac,2)
for (i in 1:ncol(twofac)){
chis[i] <- chisq.test(table(cal2[,twofac[1,i]], cal2[,twofac[2,i]]), simulate.p.value = T)$p.value
}
chis
which(chis < 0.05)
sigchis <- which(chis < 0.05)
twofac[,sigchis]
twofac
